{"version":3,"sources":["hooks/useLocalStorage.js","components/AboutModal.jsx","components/Header.jsx","components/Loading.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","AboutModal","toggle","show","Modal","isOpen","size","ModalHeader","ModalBody","href","rel","target","ModalFooter","Button","color","onClick","Header","setIsOpen","modal","setModal","toggleModal","currentPage","useLocation","pathname","split","Container","fluid","style","padding","Navbar","light","expand","background","NavbarBrand","process","NavbarToggler","Collapse","navbar","Nav","className","NavItem","NavLink","active","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","cursor","Loading","textAlign","RecipeList","lazy","TurnipsPage","FishTable","BugsTable","FossilsTable","App","hemisphere","setHemisphere","basename","fallback","marginTop","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.80283296.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import React from 'react';\nimport {\n  Button, Modal, ModalHeader, ModalBody, ModalFooter,\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  toggle: PropTypes.func.isRequired,\n  show: PropTypes.bool.isRequired,\n};\n\nconst AboutModal = ({ toggle, show }) => (\n  <Modal isOpen={show} toggle={toggle} size=\"lg\">\n    <ModalHeader toggle={toggle}>About</ModalHeader>\n    <ModalBody>\n      <p>\n        This project is open source, and you can find the code on&nbsp;\n        <a href=\"https://github.com/po8rewq/acnh-tracker\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a>\n        . Feel free to report issues, suggest features, or even submit a pull request.\n      </p>\n      <p>\n        All information is compiled from:\n        <ul>\n          <li>\n            <a\n              href=\"https://animalcrossing.fandom.com/wiki/Fish_(New_Horizons)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              https://animalcrossing.fandom.com/wiki/Fish_(New_Horizons)\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"https://animalcrossing.fandom.com/wiki/Bugs_(New_Horizons)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              https://animalcrossing.fandom.com/wiki/Bugs_(New_Horizons)\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"https://animalcrossing.fandom.com/wiki/Fossils_(New_Horizons)\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              https://animalcrossing.fandom.com/wiki/Fossils_(New_Horizons)\n            </a>\n          </li>\n        </ul>\n      </p>\n      <p>\n        Other projects:\n        <ul>\n          <li>\n            {' '}\n            Idea based on&nbsp;\n            <a\n              href=\"https://github.com/mikebryant/ac-nh-turnip-prices\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              ac-nh-turnip-prices\n            </a>\n          </li>\n        </ul>\n      </p>\n      <p>Animal Crossing and Nintendo are registered trademarks of Nintendo of America.</p>\n    </ModalBody>\n    <ModalFooter>\n      <Button color=\"secondary\" onClick={toggle}>Close</Button>\n    </ModalFooter>\n  </Modal>\n);\n\nAboutModal.propTypes = propTypes;\n\nexport default AboutModal;\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownMenu,\n} from 'reactstrap';\nimport AboutModal from './AboutModal';\n\nconst Header = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [modal, setModal] = useState(false);\n  const location = useLocation();\n\n  const toggle = () => setIsOpen(!isOpen);\n  const toggleModal = () => setModal(!modal);\n\n  const pathname = location.pathname.split('/')[1];\n  const currentPage = pathname || 'fish';\n\n  return (\n    <Container fluid style={{ padding: '0' }}>\n      <AboutModal show={modal} toggle={toggleModal} />\n      <Navbar color=\"#f1e26f\" light expand=\"md\" style={{ background: '#f1e26f' }}>\n        <NavbarBrand href={process.env.PUBLIC_URL}>AC:NH tracker</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href={`${process.env.PUBLIC_URL}/#/fish`} active={currentPage === 'fish'}>Fish</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href={`${process.env.PUBLIC_URL}/#/bugs`} active={currentPage === 'bugs'}>Bugs</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href={`${process.env.PUBLIC_URL}/#/fossils`} active={currentPage === 'fossils'}>Fossils</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar active={currentPage === 'diy'}>\n              <DropdownToggle nav caret>\n                Seasonal recipes\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem href={`${process.env.PUBLIC_URL}/#/diy/bunny_day`}>\n                  Bunny Day\n                </DropdownItem>\n                <DropdownItem href={`${process.env.PUBLIC_URL}/#/diy/cherry_blossom`}>\n                  Cherry-blossom\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n            <NavItem>\n              <NavLink href={`${process.env.PUBLIC_URL}/#/turnips`} active={currentPage === 'turnips'}>Turnips</NavLink>\n            </NavItem>\n          </Nav>\n          <NavLink style={{ cursor: 'pointer' }} onClick={toggleModal}>About</NavLink>\n        </Collapse>\n      </Navbar>\n    </Container>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Container } from 'reactstrap';\n\nconst Loading = () => (\n  <Container style={{ textAlign: 'center' }}>Loading...</Container>\n);\n\nexport default Loading;\n","import React, { Suspense, lazy } from 'react';\nimport { Container } from 'reactstrap';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Header from './components/Header';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport Loading from './components/Loading';\n\nconst RecipeList = lazy(() => import('./components/RecipeList'));\nconst TurnipsPage = lazy(() => import('./components/TurnipsPage'));\nconst FishTable = lazy(() => import('./components/FishTable'));\nconst BugsTable = lazy(() => import('./components/BugsTable'));\nconst FossilsTable = lazy(() => import('./components/FossilsTable'));\n\nconst App = () => {\n  const [hemisphere, setHemisphere] = useLocalStorage('hemisphere', 'northern');\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Header />\n      <Suspense fallback={<Loading />}>\n        <Container fluid=\"md\" style={{ marginTop: '15px' }}>\n          <Switch>\n            <Route path=\"/diy/:event\">\n              <RecipeList />\n            </Route>\n            <Route path=\"/bugs\">\n              <BugsTable hemisphere={hemisphere} setHemisphere={setHemisphere} />\n            </Route>\n            <Route path=\"/fossils\">\n              <FossilsTable />\n            </Route>\n            <Route path=\"/turnips\">\n              <TurnipsPage />\n            </Route>\n            <Route path=\"/\">\n              <FishTable hemisphere={hemisphere} setHemisphere={setHemisphere} />\n            </Route>\n          </Switch>\n        </Container>\n      </Suspense>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}